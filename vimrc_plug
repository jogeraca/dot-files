
" https://github.com/iamcco/dotfiles
"*****************************************************************************
"" Vim-PLug core
"A
"*****************************************************************************
"
if has('nvim')
    let vimplug_exists=expand('~/.config/nvim/autoload/plug.vim')
     let g:vim_bootstrap_editor = "nvim"
else
    let vimplug_exists=expand('~/.vim/autoload/plug.vim')
    let g:vim_bootstrap_editor = "vim"				" nvim or vim
endif
let g:vim_bootstrap_langs = "elixir,elm,erlang,haskell,html,javascript,python"

if !filereadable(vimplug_exists)
  if !executable("curl")
    echoerr "You have to install curl or first install vim-plug yourself!"
    execute "q!"
  endif
  echo "Installing Vim-Plug..."
  echo ""
  silent exec "!\curl -fLo " . vimplug_exists . " --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
  let g:not_finish_vimplug = "yes"

  autocmd VimEnter * PlugInstall
endif

" Required:
if has('nvim')
    call plug#begin()
else
    call plug#begin(expand('~/.vim/plugged'))
endif
"*****************************************************************************
"" Plug install packages
"*****************************************************************************

" Thema / Interface
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Others
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-obsession'
Plug 'vim-scripts/CSApprox'
Plug 'Raimondi/delimitMate'
"Plug 'Yggdroot/indentLine'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-rhubarb' " required by fugitive to :Gbrowse
Plug 'chiel92/vim-autoformat'
"Plug 'kien/ctrlp.vim'
Plug 'tpope/vim-repeat'
Plug 'christoomey/vim-sort-motion'
Plug 'christoomey/vim-system-copy'
Plug 'christoomey/vim-titlecase'

Plug 'vim-scripts/grep.vim'

" Generic Programming Support
Plug 'neomake/neomake'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
"Plug 'klen/python-mode'

" Utility
Plug 'majutsushi/tagbar'
Plug 'wakatime/vim-wakatime'
Plug 'bogado/file-line'
" Git Support
Plug 'tpope/vim-fugitive'

if isdirectory('/usr/local/opt/fzf')
  Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
else
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
  Plug 'junegunn/fzf.vim'
endif
let g:make = 'gmake'
if exists('make')
        let g:make = 'make'
endif

"" Vim-Session
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session' " investigar

" Foat windows
if has('nvim')
    Plug 'voldikss/vim-floaterm'
else
    Plug 'rhysd/vim-healthcheck'
endif
"" Snippets
"Plug 'honza/vim-snippets'

"" Color
Plug 'morhetz/gruvbox'
"*****************************************************************************
"" Custom bundles
"*****************************************************************************

" Elixir
Plug 'elixir-lang/vim-elixir'
"Plug 'mhinz/vim-mix-format'

Plug 'easymotion/vim-easymotion'



"Plug 'carlosgaldino/elixir-snippets'
"Plug 'elixir-editors/vim-elixir' " new yoser
" reference https://github.com/amacgregor/dot-files/blob/master/vimrc
Plug 'mattreduce/vim-mix'
Plug 'tpope/vim-endwise'

" elm
"" Elm Bundle
Plug 'elmcast/elm-vim'


" erlang
Plug 'jimenezrick/vimerl'


" haskell
"" Haskell Bundle
Plug 'eagletmt/neco-ghc'
Plug 'dag/vim2hs'
Plug 'pbrisbin/vim-syntax-shakespeare'


" html
"" HTML Bundle
Plug 'hail2u/vim-css3-syntax'

Plug 'gorodinskiy/vim-coloresque'
Plug 'tpope/vim-haml'
Plug 'mattn/emmet-vim'


" javascript
"" Javascript Bundle
Plug 'jelera/vim-javascript-syntax'


" python
"" Python Bundle
"Plug 'davidhalter/jedi-vim'

set encoding=UTF-8

"*****************************************************************************
"*****************************************************************************

"" Include user's extra bundle
if filereadable(expand("~/.vimrc.local.bundles"))
  source ~/.vimrc.local.bundles
endif

"*****************************************************************************
call plug#end()

" Required:
filetype plugin indent on


"*****************************************************************************
"" Basic Setup
"*****************************************************************************"
"" Encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set ttyfast

"*****************************************************************************
"" Visual Settings
"*****************************************************************************
" General
syntax on
set colorcolumn=90      " color column to limit coding length
set undofile                          " Maintain undo history between sessions "
set undodir=~/.vim/undodir
set undolevels=1000                   " use many muchos levels of undo
"" Enable hidden buffers
set nocompatible
set hidden
set history=1000
set showtabline=2                     " tab bar is always on "
set signcolumn=yes                    " always draw the sign column
set linebreak
"" Status bar
set laststatus=2
" Spaces & Tabs
set autoindent
set copyindent
set expandtab
set shiftwidth=4
set smartindent
set smarttab
set softtabstop=4
set pastetoggle=<F7>				 " when in insert mode, press <F2> to go to
                                     " pasete mode, where you can paste mass data
                                     " that won't be autoindent
set tabstop=4
set nobackup
set nowritebackup

"" Fix backspace indent
set backspace=indent,eol,start
" UI Config {{{
set ruler           " show line and col
"set relativenumber  " show relative line numbers
set number          " show absolute line numbers where your cursor is
set numberwidth=3   " keep the line number gutter narrow
set showcmd         " show command in bottom bar
set cursorline      " highlight current line
filetype indent on  " load filetype-specific index files
set showmatch       " highlight matching [{()}]
set lazyredraw      " redraw only when we need to
set noshowmode      " for echodoc to hide -- INSERT -- in command line"" Searching
set title           " change the terminal's title
set titleold="Terminal"
set titlestring=%F
" Searching
set hlsearch
set ignorecase
set incsearch
set ws! ws?

set smartcase

set fileformats=unix,dos,mac

set list
set listchars=tab:▸\ ,nbsp:␣,trail:·,extends:>,precedes:<,eol:¬
set lazyredraw
set mouse=a
set mousemodel=popup
set t_Co=256
set guioptions=egmrti
"set guifont=Fira\ Code:h12

"set gfn=Monospace 10
"" Disable the blinking cursor.
set gcr=a:blinkon0
set scrolloff=3
"" Use modeline overrides
set modeline
set modelines=10
" Folding {{{
set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max
set foldmethod=indent "syntax   " fold based on syntax
set foldlevel=1

if exists('$SHELL')
    set shell=$SHELL
else
    set shell=/bin/sh
endif

if has('nvim')
    set inccommand=split
endif

" Floaterm
let g:floaterm_background = '#303030'
noremap  <silent> <F10> :FloatermToggle<CR>
noremap! <silent> <F10> <Esc>:FloatermToggle<CR>
tnoremap <silent> <F10> <C-\><C-n>:FloatermToggle<CR>


" session management
let g:session_directory = "~/.vim/session"
let g:session_autoload = "no"
let g:session_autosave = "yes"
let g:session_command_aliases = 1
"let g:session_autoload = "yes"  " new yoser
"let g:session_default_to_last = 1 "new yoser
"noremap Y y:call system("wl-copy", @")<cr>")
"nnoremap p :let @"=substitute(system("wl-paste --no-newline"), '<C-v><C-m>', '', 'g')<cr>p"

let no_buffers_menu=1
silent! colorscheme gruvbox
let g:gruvbox_termcolors = 256
let g:gruvbox_contrast_dark = 'hard'


if has("gui_running")
  if has("gui_mac") || has("gui_macvim")
    set guifont=Menlo:h12
    set transparency=7
  endif
else
  let g:CSApprox_loaded = 1
  " IndentLine
  "let g:indentLine_enabled = 1
  "let g:indentLine_concealcursor = 0
  "let g:indentLine_char = 'c'
  "let g:indentLine_char_list = ['|', '¦', '┆', '┊']
  "let g:indentLine_faster = 1
  "let g:indentLine_conceallevel = 3
  "
  "let g:indentLine_bufTypeExclude = ['coc-explorer']
  "let g:indentLine_bufNameExclude = ['coc-explorer.*']
  "let g:indentLine_fileTypeExclude = ['coc-explorer']

  if $COLORTERM == 'gnome-terminal'
    set term=gnome-256color
  else
    if $TERM == 'xterm'
      set term=xterm-256color
    endif
  endif

endif


if &term =~ '256color'
  set t_ut=
endif
set t_Co=256

"" Map leader to ,
let mapleader=','

" Resize splits instead
"let g:elite_mode=1
"if get(g:, 'elite_mode')
"    nnoremap <C-Up> :resize +2 <CR>
"    nnoremap <S-Up> :resize +2 <CR>
"    nnoremap <C-Down> :resize -2 <CR>
"    nnoremap <S-Down> :resize -2 <CR>
"
"    nnoremap <C-S-V> :echo 'hola 2'<CR>
"    map <C-S-Down> :vertical resize -2 <CR>
"endif

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

"if exists("*fugitive#statusline")
  "set statusline+=%{fugitive#statusline()}
"endif

" vim-airline
let g:airline_powerline_fonts = 1
let g:airline_theme = 'gruvbox'
"let g:airline_theme = 'powerlineish'
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline_skip_empty_sections = 1

let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#buffer_nr_show = 1
" TODO: validate
let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'



"*****************************************************************************
"" Abbreviations
"*****************************************************************************
"" no one is really happy until you have this shortcuts
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall

autocmd BufWrite * :Autoformat
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
"augroup neomake
""    autocmd! BufWritePost * Neomake
"augroup END

set iskeyword-=.
autocmd BufReadPost * set isk-=.

" grep.vim
nnoremap <silent> <leader>f :Rgrep<CR>
let Grep_Default_Options = '-IR'
let Grep_Skip_Files = '*.log *.db'
let Grep_Skip_Dirs = '.git node_modules'

" terminal emulation
nnoremap <silent> <leader>sh :terminal<CR>


"*****************************************************************************
"" Commands
"*****************************************************************************
" remove trailing whitespaces
command! FixWhitespace :%s/\s\+$//e

"*****************************************************************************
"" Functions
"*****************************************************************************
if !exists('*s:setupWrapping')
  function s:setupWrapping()
    set wrap
    set wm=2
    set textwidth=79
  endfunction
endif
"*****************************************************************************
"" Autocmd Rules
"*****************************************************************************
"" The PC is fast enough, do syntax highlight syncing from start unless 200 lines
augroup vimrc-sync-fromstart
  autocmd!
  autocmd BufEnter * :syntax sync maxlines=200
augroup END

"" Remember cursor position
augroup vimrc-remember-cursor-position
  autocmd!
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

"" txt
augroup vimrc-wrapping
  autocmd!
  autocmd BufRead,BufNewFile *.txt call s:setupWrapping()
augroup END

"" make/cmake
augroup vimrc-make-cmake
  autocmd!
  autocmd FileType make setlocal noexpandtab
  autocmd BufNewFile,BufRead CMakeLists.txt setlocal filetype=cmake
augroup END

set autoread
au CursorHold,CursorHoldI * checktime
"au FocusGained,BufEnter * :checktime
"*****************************************************************************
"" Mappings
"*****************************************************************************
map <silent> <Leader>ws :highlight clear ExtraWhitespace<CR>

"" Split
noremap <Leader>h :<C-u>split<CR>
noremap <Leader>v :<C-u>vsplit<CR>

"" Git fugitive mapping
noremap <Leader>ga :Gwrite<CR>
noremap <Leader>gc :Gcommit<CR>
noremap <Leader>gsh :Gpush<CR>
noremap <Leader>gll :Gpull<CR>
noremap <Leader>gs :Gstatus<CR>
noremap <Leader>gb :Gblame<CR>
noremap <Leader>gd :Gvdiff<CR>
noremap <Leader>gr :Gremove<CR>
noremap <leader>gw :Gbrowse<cr>

""" Git
nmap <silent> }c <Plug>(coc-git-nextchunk)
nmap <silent> {c <Plug>(coc-git-prevchunk)
nmap <silent> <Leader>cs :CocCommand git.chunkStage<CR>
nmap <silent> <Leader>cu :CocCommand git.chunkUndo<CR>
nmap <silent> <Leader>cp <Plug>(coc-git-chunkinfo)

" session management
nnoremap <leader>so :OpenSession<Space>
nnoremap <leader>ss :SaveSession<Space>
nnoremap <leader>sd :DeleteSession<CR>
nnoremap <leader>sc :CloseSession<CR>

"nnoremap <silent> <S-t> :tabnew<CR>

"" Set working directory
nnoremap <leader>. :lcd %:p:h<CR>

"" Opens an edit command with the path of the currently edited file filled in
noremap <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

"" Opens a tab edit command with the path of the currently edited file filled
noremap <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

"" fzf.vim
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__
let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"

" The Silver Searcher
if executable('ag')
  let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'
  set grepprg=ag\ --nogroup\ --nocolor
endif

" ripgrep
if executable('rg')
  let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'
  set grepprg=rg\ --vimgrep
  command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
endif

let g:fzf_history_dir = '~/.local/share/fzf-history'

cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <leader>e :FZF -m<CR>

" Fzf configuration
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }


" Customize fzf colors to match your color scheme
 let g:fzf_colors =
    \ {
    \ 'fg':      ['fg', 'Normal'],
    \ 'bg':      ['bg', 'Normal'],
    \ 'hl':      ['fg', 'Comment'],
    \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
    \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
    \ 'hl+':     ['fg', 'Statement'],
    \ 'info':    ['fg', 'PreProc'],
    \ 'prompt':  ['fg', 'Conditional'],
    \ 'pointer': ['fg', 'Exception'],
    \ 'marker':  ['fg', 'Keyword'],
    \ 'spinner': ['fg', 'Label'],
    \ 'header':  ['fg', 'Comment']
    \ }

" Default fzf layout
" - down / up / left / right
let g:fzf_layout = { 'up': '~30%' }

"Recovery commands from history through FZF
nmap <leader>y :History:<CR>

" Disable visualbell
set noerrorbells visualbell t_vb=
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
endif

"" Copy/Paste/Cut

noremap YY "+y<CR>
noremap <leader>p "+gP<CR>
noremap XX "+x<CR>

"*****************************************************************************
"Wayland clipboard

xnoremap Y y:!wl-copy <C-r>"<cr><cr>gv
"xnoremap "Y y:call system("wl-copy", @")<cr>
nnoremap "P :let @"=substitute(system("wl-paste --no-newline"), '<C-v><C-m>', '', 'g')<cr>p
nnoremap "*P :let @"=substitute(system("wl-paste --no-newline --primary"), '<C-v><C-m>', '', 'g')<cr>p


set clipboard=unnamedplus


if has('macunix')
  " pbcopy for OSX copy/paste
  vmap <C-x> :!pbcopy<CR>
  vmap <C-c> :w !pbcopy<CR><CR>
endif

"" Buffer nav
nnoremap <Tab> :bn<CR>
nnoremap <S-Tab> :bp<CR>

"" Close buffer
noremap <leader>c :bd<CR>

"" Clean search (highlight)
nnoremap <silent> <leader><space> :noh<cr>

"" Switching windows
"noremap <C-j> <C-w>j
"noremap <C-k> <C-w>k
"noremap <C-l> <C-w>l
"noremap <C-h> <C-w>h

"" Vmap for maintain Visual Mode after shifting > and <
vmap < <gv
vmap > >gv

"" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv


"*****************************************************************************
"" Custom configs
"*****************************************************************************


"*****************************************************************************
"*****************************************************************************
" elixir
"*****************************************************************************
" Elixir Tagbar Configuration new yoser
 let g:tagbar_type_elixir = {
     \ 'ctagstype' : 'elixir',
     \ 'kinds' : [
        \ 'f:functions',
        \ 'functions:functions',
        \ 'c:callbacks',
        \ 'd:delegates',
        \ 'e:excep/ions',
        \ 'i:implementations',
        \ 'a:macros',
        \ 'o:operators',
        \ 'm:modules',
        \ 'p:protocols',
        \ 'r:records',
        \ 't:tests'
     \ ]
  \ }


" Recommended key-mappings.
" <CR>: close popup and save indent.
"inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>

" <TAB>: completion.
"TODO: "inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" elm
" elm-vim
let g:elm_setup_keybindings = 0
let g:elm_format_autosave = 1

" vim-polyglot
let g:polyglot_disabled = ['elm']

" erlang
let erlang_folding = 1
let erlang_show_errors = 1

" haskell
let g:haskell_conceal_wide = 1
let g:haskell_multiline_strings = 1
let g:necoghc_enable_detailed_browse = 1
autocmd Filetype haskell setlocal omnifunc=necoghc#omnifunc

" html
" for html files, 2 spaces
autocmd Filetype html setlocal ts=2 sw=2 expandtab

" javascript
let g:javascript_enable_domhtmlcss = 1

" vim-javascript
augroup vimrc-javascript
  autocmd!
  autocmd FileType javascript setl tabstop=4|setl shiftwidth=4|setl expandtab softtabstop=4
augroup END

" python
" vim-python
"augroup vimrc-python
  "autocmd!
  "autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=8 colorcolumn=79
      "\ formatoptions+=croq softtabstop=4
      "\ cinwords=if,elif,else,for,while,try,except,finally,def,class,with
"augroup END

" vim-airline
let g:airline#extensions#virtualenv#enabled = 1

" Syntax highlight
" Default highlight is better than polyglot
"let g:polyglot_disabled = ['python']
"let python_highlight_all = 1
"python-virtualenv

"*****************************************************************************
"*****************************************************************************

"" Include user's local vim config
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

"*****************************************************************************
"" Convenience variables
"*****************************************************************************

" vim-airline
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

if !exists('g:airline_powerline_fonts')
  let g:airline#extensions#tabline#left_sep = ' '
  let g:airline#extensions#tabline#left_alt_sep = '|'
  let g:airline_left_sep          = '▶'
  let g:airline_left_alt_sep      = '»'
  let g:airline_right_sep         = '◀'
  let g:airline_right_alt_sep     = '«'
  let g:airline#extensions#branch#prefix     = '⤴' "➔, ➥, ⎇
  let g:airline#extensions#readonly#symbol   = '⊘'
  let g:airline#extensions#linecolumn#prefix = '¶'
  let g:airline#extensions#paste#symbol      = 'ρ'
  let g:airline_symbols.linenr    = '␊'
  let g:airline_symbols.branch    = '⎇'
  let g:airline_symbols.paste     = 'ρ'
  let g:airline_symbols.paste     = 'Þ'
  let g:airline_symbols.paste     = '∥'
  let g:airline_symbols.whitespace = 'Ξ'
else
  let g:airline#extensions#tabline#left_sep = ''
  let g:airline#extensions#tabline#left_alt_sep = ''

  " powerline symbols
  let g:airline_left_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_sep = ''
  let g:airline_right_alt_sep = ''
  let g:airline_symbols.branch = ''
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = ''
endif


" configure buffers in tabs
"au BufNewFile,BufRead * nested
"  \ if &buftype != "help" |
"  \   tab sball |
"  \ endif

"https://gitlab.com/DanielFGray/dotfiles/blob/master/vimrc
"https://github.com/cih9088/dotfiles/blob/master/vim/vimr
" TODO: coc

let g:coc_global_extensions = [
     \ 'coc-explorer',
     \ 'coc-git',
     \ 'coc-highlight',
     \ 'coc-tslint-plugin',
     \ 'coc-lists',
     \ 'coc-diagnostic',
     \ 'coc-prettier',
     \ 'coc-eslint',
     \ 'coc-tsserver',
     \ 'coc-marketplace',
     \ 'coc-snippets',
     \ 'coc-json',
     \ 'coc-yaml',
     \ 'coc-tsserver',
     \ 'coc-html',
     \ 'coc-css',
     \ 'coc-tag',
     \ 'coc-vimlsp',
     \ 'coc-rls',
     \ 'coc-python',
     \ 'coc-elixir']

:nmap oe  :CocCommand explorer<CR>

inoremap <silent><expr> <c-space> coc#refresh()
" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> <C-p> :GFiles <CR>

if !has('nvim')
    let g:airline_section_c = airline#section#create(['%{airline#extensions#fugitiveline#bufname()}','%m',"   %#__accent_gray__# %{get(b:,'coc_git_blame','')} %#__restore__#", '%#__accent_red#%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#'])
endif
"Use <C-l> to trigger snippet expand
imap <C-l> <Plug>(coc-snippets-expand)
" Better display for messages
set cmdheight=2
" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.

inoremap <silent><expr> <TAB>
   \ pumvisible() ? "\<C-n>":
   \ <SID>check_back_space() ? "\<TAB>" :
   \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction


" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.

""
"TODO: inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

"TODO: temporal inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : \"\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use K to show documentation in preview window
nnoremap <silent> gh :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction


" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <C-d> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
if has('nvim')
    "set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\
else
    "set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\
endif
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
"
"set statusline^=%{get(b:,'coc_current_function','')}
"set statusline^=%{coc#status()}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" Multiple cursor sessions


hi CocCursorRange guibg=#b16286 guifg=#ebdfff
nmap <expr> <silent> <C-d> <SID>select_current_word()

function! s:select_current_word()
      if !get(g:, 'coc_cursors_activated', 0)
              return "\<Plug>(coc-cursors-word)"
                endif
                  return "*\<Plug>(coc-cursors-word):nohlsearch\<CR>"
              endfunc

nmap <silent> <C-c> <Plug>(coc-cursors-position)
"nmap <silent> <C-d> <Plug>(coc-cursors-word) *
"xmap <silent> <C-d> y/\V<C-r>=escape(@",'/\')<CR><CR>gN<Plug>(coc-cursors-range)gn
")
"xmap <silent> <C-d> <Plug>(coc-cursors-range)
" use normal command like `<leader>xi(`
"       osera
nmap <leader>x <Plug>(coc-cursors-operator))



so ~/.vim/google_python_style.vim
